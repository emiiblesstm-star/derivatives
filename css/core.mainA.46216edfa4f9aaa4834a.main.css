@import url(https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap);
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-icon {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1);
  --fill-color4: var(--icon-grey-background);
  --fill-color5: var(--text-prominent);
}

.dc-icon--disabled {
  --fill-color1: var(--text-disabled);
  --fill-color2: var(--text-disabled);
}

.dc-icon--active {
  --fill-color1: #ffffff;
  --fill-color2: #ffffff;
}

.dc-icon--green {
  --fill-color1: var(--text-profit-success);
  --fill-color2: var(--text-profit-success);
  --fill-color3: #ffffff;
}

.dc-icon--red {
  --fill-color1: var(--text-loss-danger);
  --fill-color2: var(--text-loss-danger);
  --fill-color3: #ffffff;
}

.dc-icon--secondary {
  --fill-color1: var(--text-less-prominent);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: #ffffff;
}

.dc-icon--brand {
  --fill-color1: var(--brand-red-coral);
  --fill-color2: var(--brand-secondary);
  --fill-color3: #ffffff;
}

.dc-icon--black {
  --fill-color1: var(--icon-black-plus);
}

.dc-icon--orange {
  --fill-color1: var(--status-warning);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/* @define dc-accordion */
.dc-accordion__wrapper {
  /* postcss-bem-linter: ignore */
}

.dc-accordion__wrapper > div:last-child {
  border-bottom-right-radius: 4px;
  border-bottom-left-radius: 4px;
  border-bottom-width: 1px;
}

.dc-accordion__item {
  border: 1px solid var(--general-section-1);
  border-bottom-width: 0;
  color: var(--text-general);
  font-size: 1.4rem;
}

.dc-accordion__item--first {
  border-top-right-radius: 4px;
  border-top-left-radius: 4px;
}

.dc-accordion__item--open .dc-accordion__item-header {
  border-bottom: 1px solid var(--general-section-1);
}

.dc-accordion__item--open .dc-accordion__item-content {
  display: block;
}

.dc-accordion__item--close .dc-accordion__item-content {
  display: none;
}

.dc-accordion__item-header {
  cursor: pointer;
  line-height: 1.43;
  padding: 8px 16px;
}

.dc-accordion__item-header-icon {
  vertical-align: middle;
  /* postcss-bem-linter: ignore */
}

[dir="ltr"] .dc-accordion__item-header-icon-wrapper {
  float: right;
  padding-left: 16px;
}

[dir="rtl"] .dc-accordion__item-header-icon-wrapper {
  float: left;
  padding-right: 16px;
}

.dc-accordion__item-header-icon path,
.dc-accordion__item-header-icon rect {
  fill: var(--text-general);
}

.dc-accordion__item-content {
  padding: 16px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-field {
  position: absolute;
  top: 4.1rem;
  font-size: var(--text-size-xxs);
  line-height: 1.25;
}

[dir="ltr"] .dc-field {
  text-align: left !important;
}

[dir="rtl"] .dc-field {
  text-align: right !important;
}

[dir="ltr"] .dc-field--error {
  text-align: left;
}

[dir="rtl"] .dc-field--error {
  text-align: right;
}

.dc-field--error {
  font-size: 1.2rem;
  color: var(--text-loss-danger);
  font-weight: 400;
  text-transform: none;
  line-height: 1.25;
  line-height: 1;
}

[dir="ltr"] .dc-field--error {
  padding-left: 1.1rem;
}

[dir="rtl"] .dc-field--error {
  padding-right: 1.1rem;
}

[dir="ltr"] .dc-field--warn {
  text-align: left;
}

[dir="rtl"] .dc-field--warn {
  text-align: right;
}

.dc-field--warn {
  padding-top: 0.4rem;
  font-size: 1.2rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.25;
  color: #999999;
}

[dir="ltr"] .dc-field--warn {
  padding-left: 1.2rem;
}

[dir="rtl"] .dc-field--warn {
  padding-right: 1.2rem;
}

.dc-input__footer .dc-field {
  position: relative;
  top: auto;
  top: initial;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-input {
  position: relative;
  width: 100%;
  display: flex;
  flex-direction: column;
  margin-bottom: 3.2rem;
  line-height: 1.43;
}

.dc-input:hover:not(.dc-input--disabled) {
  border-color: var(--border-hover);
}

.dc-input[focus-within] {
  border-color: var(--brand-secondary);
}

.dc-input:focus-within {
  border-color: var(--brand-secondary);
}

.dc-input[focus-within]:hover {
  border-color: var(--brand-secondary);
}

.dc-input:focus-within:hover {
  border-color: var(--brand-secondary);
}

.dc-input--bottom-label-active {
  margin-bottom: 0;
  margin-bottom: initial;
}

.dc-input--bottom-label-active.dc-input--error {
  margin-bottom: calc(5rem - 12px);
}

.dc-input__bottom-label {
  margin-bottom: calc(3.2rem - 12px);
}

[dir="ltr"] .dc-input__bottom-label {
  margin-left: 1.2rem;
}

[dir="rtl"] .dc-input__bottom-label {
  margin-right: 1.2rem;
}

.dc-input--disabled {
  border-color: var(--border-normal);
}

.dc-input--disabled .dc-datepicker__display-text {
  color: var(--text-less-prominent);
}

@media (max-width: 992px) {
  .dc-input--error {
    margin-bottom: 5rem;
  }
}

.dc-input--error label {
  color: var(--brand-red-coral) !important;
}

.dc-input--error ::-moz-placeholder {
  color: var(--text-loss-danger) !important;
  opacity: 1 !important;
}

.dc-input--error ::placeholder {
  color: var(--text-loss-danger) !important;
  opacity: 1 !important;
}

.dc-input__container {
  display: flex;
  align-items: center;
  border-radius: 4px;
  border: 1px solid var(--border-normal);
  padding: 0.5rem 1.2rem;
  height: 4rem;
}

.dc-input__container:hover:not(.dc-input--disabled) {
  border-color: var(--general-disabled);
}

.dc-input__container[focus-within] {
  border-color: var(--brand-secondary);
}

.dc-input__container:focus-within {
  border-color: var(--brand-secondary);
}

.dc-input__container[focus-within]:hover {
  border-color: var(--brand-secondary);
}

.dc-input__container:focus-within:hover {
  border-color: var(--brand-secondary);
}

.dc-input__container--error {
  border-color: var(--brand-red-coral) !important;
}

.dc-input__container--disabled {
  border-color: var(--general-disabled);
}

.dc-input__field {
  background: none;
  color: var(--text-prominent);
  font-size: var(--text-size-xs);
  width: 100%;
  height: 100%;
  min-width: 0;
  /* Not empty fields */
  /* To get rid of ugly chrome autofill shadow dom-applied background color */
}

.dc-input__field::-moz-placeholder {
  line-height: 1.5;
  opacity: 0;
  -moz-transition: opacity 0.25s;
  transition: opacity 0.25s;
  /* To vertically align placeholder in Firefox */
}

.dc-input__field::placeholder {
  line-height: 1.5;
  opacity: 0;
  transition: opacity 0.25s;
  /* To vertically align placeholder in Firefox */
}

@-moz-document url-prefix("") {
  .dc-input__field::-moz-placeholder {
    line-height: 1.25;
  }
  .dc-input__field::placeholder {
    line-height: 1.25;
  }
}

.dc-input__field--placeholder-visible::-moz-placeholder {
  opacity: 0.4;
}

.dc-input__field--placeholder-visible::placeholder {
  opacity: 0.4;
}

.dc-input__field:focus, .dc-input__field:not(:focus):not([value=""]) {
  outline: none;
}

.dc-input__field:focus ~ label, .dc-input__field:not(:focus):not([value=""]) ~ label {
  transform: translate(0, -1.8rem) scale(0.75);
  padding: 0 4px;
}

.dc-input__field:disabled {
  -webkit-text-fill-color: var(--text-less-prominent);
  opacity: 1;
  color: var(--text-less-prominent);
  /* stylelint-disable */
  /* stylelint-enable */
}

.dc-input__field:disabled ~ label {
  color: var(--text-less-prominent) !important;
}

.dc-input__field:disabled ~ svg .color1-fill {
  fill: var(--text-less-prominent);
}

@media not all and (-webkit-min-device-pixel-ratio: 0), not all and (min-resolution: 0.001dpcm) {
  @supports (-webkit-appearance: none) {
    .dc-input__field:disabled {
      color: var(--text-prominent);
    }
  }
}

.dc-input__field:focus {
  outline: none;
}

.dc-input__field:focus ~ label {
  color: var(--brand-secondary);
}

.dc-input__field:focus::-moz-placeholder {
  opacity: 0.4;
}

.dc-input__field:focus::placeholder {
  opacity: 0.4;
}

.dc-input__field:not(.dc-input--no-placeholder):not(:focus):not([value=""]) ~ label {
  color: var(--text-general);
}

.dc-input__field[type=number]::-webkit-inner-spin-button, .dc-input__field[type=number]::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.dc-input__field[type=number] {
  -moz-appearance: textfield;
}

.dc-input__field[type=textarea] {
  height: 9.6rem;
  border: none;
  resize: none;
}

.dc-input__field[type=textarea] ~ .dc-field--error {
  top: 10rem;
}

.dc-input__field:-webkit-autofill {
  -webkit-box-shadow: 0 0 0 30px var(--fill-normal) inset !important;
  -webkit-text-fill-color: var(--text-prominent) !important;
}

.dc-input__field:-webkit-autofill {
  border-radius: 4px;
}

.dc-input__field:-webkit-autofill:hover, .dc-input__field:-webkit-autofill:focus, .dc-input__field:-webkit-autofill:active {
  -webkit-box-shadow: 0 0 0 30px var(--fill-normal) inset !important;
}

.dc-input__field::-ms-reveal {
  display: none;
}

.dc-input__textarea:not(.dc-input--no-placeholder):not(:focus):empty ~ label {
  transform: none;
  color: var(--text-less-prominent);
  padding: 0 4px;
}

.dc-input__leading-icon {
  top: 1rem;
  position: absolute;
  pointer-events: none;
  cursor: text;
  font-size: var(--text-size-xs);
}

[dir="ltr"] .dc-input__leading-icon {
  margin-left: 1rem;
  left: 0;
}

[dir="rtl"] .dc-input__leading-icon {
  margin-right: 1rem;
  right: 0;
}

.dc-input__leading-icon.symbols {
  top: 0.9rem;
}

[dir="ltr"] .dc-input__leading-icon.symbols + .dc-input__field {
  padding-left: 4rem;
}

[dir="rtl"] .dc-input__leading-icon.symbols + .dc-input__field {
  padding-right: 4rem;
}

[dir="ltr"] .dc-input__leading-icon.symbols--usdc + .dc-input__field, [dir="ltr"] .dc-input__leading-icon.symbols--ust + .dc-input__field {
  padding-left: 4.8rem;
}

[dir="rtl"] .dc-input__leading-icon.symbols--usdc + .dc-input__field, [dir="rtl"] .dc-input__leading-icon.symbols--ust + .dc-input__field {
  padding-right: 4.8rem;
}

.dc-input__trailing-icon {
  font-size: var(--text-size-xs);
}

[dir="ltr"] .dc-input__trailing-icon {
  right: 0;
}

[dir="rtl"] .dc-input__trailing-icon {
  left: 0;
}

.dc-input__trailing-icon.symbols {
  top: 0.9rem;
}

[dir="ltr"] .dc-input__trailing-icon.symbols + .dc-input__field {
  padding-right: 4rem;
}

[dir="rtl"] .dc-input__trailing-icon.symbols + .dc-input__field {
  padding-left: 4rem;
}

.dc-input__trailing-icon.symbols--usd {
  top: 1rem;
  position: absolute;
}

[dir="ltr"] .dc-input__trailing-icon.symbols--usd {
  right: 1.1rem;
}

[dir="rtl"] .dc-input__trailing-icon.symbols--usd {
  left: 1.1rem;
}

[dir="ltr"] .dc-input__trailing-icon.symbols--usdc + .dc-input__field, [dir="ltr"] .dc-input__trailing-icon.symbols--ust + .dc-input__field {
  padding-right: 4.8rem;
}

[dir="rtl"] .dc-input__trailing-icon.symbols--usdc + .dc-input__field, [dir="rtl"] .dc-input__trailing-icon.symbols--ust + .dc-input__field {
  padding-left: 4.8rem;
}

.dc-input__label {
  white-space: nowrap;
  color: var(--text-less-prominent);
  font-size: var(--text-size-xs);
  background-color: var(--general-main-1);
  position: absolute;
  pointer-events: none;
  top: 1.1rem;
  transition: 0.25s ease all;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: calc(100% - 1.4rem);
}

[dir="ltr"] .dc-input__label {
  left: 1.1rem;
  transform-origin: top left;
}

[dir="rtl"] .dc-input__label {
  right: 1.1rem;
  transform-origin: top right;
}

.dc-input:not(.dc-input--no-placeholder) .dc-input:not(.dc-input--no-placeholder) __label {
  color: var(--text-general);
  transition: 0.25s ease all;
  transform: translateZ(0);
}

[dir="ltr"] .dc-input__hint {
  margin: 0.1rem 0 -1.9rem 1.3rem;
}

[dir="rtl"] .dc-input__hint {
  margin: 0.1rem 1.3rem -1.9rem 0;
}

.dc-input__hint--relative {
  position: relative;
  top: auto;
  top: initial;
}

[dir="ltr"] .dc-input__hint--relative {
  margin-left: 1.2rem;
}

[dir="rtl"] .dc-input__hint--relative {
  margin-right: 1.2rem;
}

.dc-input__counter {
  color: var(--text-less-prominent);
  font-size: 1.2rem;
}

[dir="ltr"] .dc-input__counter {
  margin-left: 1.2rem;
}

[dir="rtl"] .dc-input__counter {
  margin-right: 1.2rem;
}

.dc-input--no-placeholder label {
  transform: translate(0, -1.8rem) scale(0.75);
  color: var(--text-prominent);
  padding: 0 4px;
  background-color: var(--fill-normal);
}

.dc-input__footer {
  display: flex;
  flex-direction: row;
  margin-bottom: -1.6rem;
}

[dir="ltr"] .dc-input__footer > :not(.dc-input__counter) {
  margin-right: 1.2rem;
}

[dir="rtl"] .dc-input__footer > :not(.dc-input__counter) {
  margin-left: 1.2rem;
}

[dir="ltr"] .dc-input__footer > .dc-input__counter {
  margin-left: auto;
}

[dir="rtl"] .dc-input__footer > .dc-input__counter {
  margin-right: auto;
}

.dc-input__wrapper {
  margin-bottom: 1.6rem;
}

[dir="ltr"] .dc-input__input-group {
  border-right-style: none;
  border-radius: 4px 0 0 4px;
}

[dir="rtl"] .dc-input__input-group {
  border-left-style: none;
  border-radius: 0 4px 4px 0;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-text {
  font-size: var(--text-size);
  color: var(--text-color);
  line-height: var(--text-lh);
  font-weight: var(--text-weight);
  text-align: var(--text-align);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.amount-input-wrapper {
  display: flex;
  flex-direction: column;
  padding: 0.8rem;
  height: auto;
}

.amount-input-container {
  position: relative;
  height: 2.8rem;
}

.amount-input-container .dc-input__field {
  color: var(--text-general);
}

.amount-input-container--error .dc-input__field {
  color: var(--text-loss-danger);
  -webkit-text-fill-color: var(--text-loss-danger);
}

.amount-input-container--disabled .dc-input__field {
  color: var(--text-disabled-1);
}

@media (min-width: 320px) and (max-width: 767px) {
  .amount-input-container {
    height: 2.4rem;
  }
}

.amount-input {
  position: absolute;
  border: none;
  flex: 1;
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
}

.amount-input input {
  font-size: var(--text-size-sm);
  font-weight: var(--text-weight-bold);
}

@media (min-width: 320px) and (max-width: 767px) {
  .amount-input input {
    font-size: var(--text-size-s);
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-dropdown-list {
  position: absolute;
  margin-top: 4px;
  border-radius: 4px;
  z-index: 1;
  box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.24);
  transform-origin: top;
  transition: transform 0.25s ease, opacity 0.25s linear;
  transform: scale(1, 0);
  cursor: pointer;
  background-color: var(--state-normal);
}

.dc-dropdown-list--enter, .dc-dropdown-list--exit {
  transform: scale(1, 0);
  opacity: 0;
}

.dc-dropdown-list--enter-done {
  transform: scale(1, 1);
  opacity: 1;
}

.dc-dropdown-list__group-header {
  padding: 0.6rem;
  font-size: 1.4rem;
  font-weight: bold;
  color: var(--brand-red-coral);
  height: 3.6rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.dc-dropdown-list__item {
  min-height: 40px;
  display: flex;
  align-items: center;
  padding: 1rem 1.6rem;
  font-size: 1.4rem;
  color: var(--text-general);
}

.dc-dropdown-list__item:hover {
  background-color: var(--state-hover);
}

.dc-dropdown-list__item--active {
  background-color: var(--state-active);
}

[dir="ltr"] .dc-dropdown-list__item-icon {
  margin-right: 8px;
}

[dir="rtl"] .dc-dropdown-list__item-icon {
  margin-left: 8px;
}

.dc-dropdown-list__item--disabled {
  color: var(--text-disabled);
  cursor: not-allowed;
}

.dc-dropdown-list__separator {
  display: flex;
  width: calc(100% - 3.2rem);
  border-bottom: 1px solid var(--border-normal);
  margin: 1.6rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-autocomplete {
  width: 100%;
  position: relative;
}

.dc-autocomplete__trailing-icon {
  position: absolute;
  pointer-events: none;
  cursor: text;
  transition: transform 0.2s ease;
  transform: rotate(0deg);
  transform-origin: 50% 45%;
}

[dir="ltr"] .dc-autocomplete__trailing-icon {
  right: 0;
  margin-right: 1.1rem;
}

[dir="rtl"] .dc-autocomplete__trailing-icon {
  left: 0;
  margin-left: 1.1rem;
}

[dir="ltr"] .dc-autocomplete__trailing-icon--opened {
  transform: rotate(-180deg);
}

[dir="rtl"] .dc-autocomplete__trailing-icon--opened {
  transform: rotate(180deg);
}

.dc-autocomplete__trailing-icon--disabled {
  --fill-color1: var(--text-less-prominent) !important;
}

.dc-autocomplete__trailing-icon .color1-fill {
  fill: var(--text-less-prominent);
}

.dc-autocomplete .dc-input {
  margin-bottom: 0;
}

.dc-autocomplete .dc-input--error .dc-autocomplete__trailing-icon .color1-fill {
  fill: var(--text-loss-danger);
}

.dc-autocomplete .dc-input__field {
  white-space: nowrap;
  text-overflow: ellipsis;
}

.dc-autocomplete .dc-dropdown-list {
  box-shadow: 0 8px 16px 0 var(--shadow-menu);
  background: var(--general-main-2);
}

.dc-autocomplete:focus, .dc-autocomplete[focus-within], .dc-autocomplete:active {
  outline: 0;
}

.dc-autocomplete:focus, .dc-autocomplete:focus-within, .dc-autocomplete:active {
  outline: 0;
}

.dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete[focus-within] .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
  fill: var(--brand-secondary);
}

.dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:focus-within .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
  fill: var(--brand-secondary);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.skeleton {
  width: 100%;
  height: 100%;
  background-color: var(--semantic-color-monochrome-surface-normal-lowest);
  border-radius: var(--semantic-borderRadius-md);
}

.skeleton.animated {
  animation: var(--motion-duration-moderate) ease-out alternate infinite pulsate;
}

@keyframes pulsate {
  to {
    background-color: var(--semantic-color-monochrome-surface-normal-low);
  }
}

.skeleton.icon {
  width: var(--size-generic-md);
  height: var(--size-generic-md);
}

.skeleton-paragraph {
  display: flex;
  flex-direction: column;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define barspinner */
.barspinner {
  margin: auto;
  width: 6rem;
  height: 2rem;
  white-space: nowrap;
}

.barspinner__rect {
  margin: 0.4rem;
  border-radius: 20px;
  height: 60%;
  width: 0.6rem;
  display: inline-block;
  animation: sk-stretchdelay 1.2s infinite ease-in-out;
}

.barspinner__rect--1 {
  animation-delay: -1.2s;
}

.barspinner__rect--2 {
  animation-delay: -1.1s;
}

.barspinner__rect--3 {
  animation-delay: -1s;
}

.barspinner__rect--4 {
  animation-delay: -0.9s;
}

.barspinner__rect--5 {
  animation-delay: -0.8s;
}

.barspinner--dark .barspinner__rect {
  background-color: var(--brand-secondary);
}

@keyframes sk-stretchdelay {
  0%, 40%, 100% {
    transform: scaleY(1);
  }

  20% {
    transform: scaleY(2);
  }
}
/** @define initial-loader */
.initial-loader {
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  display: flex;
  background: transparent;
}

.initial-loader--fullscreen {
  width: 100vw;
  height: 100vh;
}

@media (min-width: 1024px) {
  .initial-loader--fullscreen {
    height: calc(100vh - 48px - 36px);
  }
}

@media (min-width: 320px) and (max-width: 767px) {
  .initial-loader--fullscreen {
    height: calc(100vh - 48px);
  }
}

.initial-loader__barspinner {
  margin: 5rem auto;
}

.initial-loader__barspinner--rect {
  background-color: var(--brand-secondary);
}

.loading-dtrader-v2__trade, .loading-dtrader-v2__positions, .loading-dtrader-v2__contract-details {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.loading-dtrader-v2__trade {
  background-color: var(--semantic-color-slate-solid-surface-frame-mid);
  padding: 0 var(--core-spacing-400);
  gap: var(--semantic-spacing-general-sm);
  position: relative;
  overflow-x: hidden;
}

.loading-dtrader-v2__trade .skeleton-box,
.loading-dtrader-v2__trade .skeleton-box__trade-types,
.loading-dtrader-v2__trade .skeleton-box__trade-params,
.loading-dtrader-v2__trade .skeleton-box__chart {
  display: flex;
  flex-direction: column;
  border-radius: var(--semantic-borderRadius-md);
  background-color: var(--component-modal-bg);
}

[dir="ltr"] .loading-dtrader-v2__trade .skeleton-box__trade-types,[dir="ltr"] 
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-types,[dir="ltr"] 
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-types,[dir="ltr"] 
.loading-dtrader-v2__trade .skeleton-box__chart__trade-types {
  left: calc(-1 * var(--semantic-spacing-general-sm));
}

[dir="rtl"] .loading-dtrader-v2__trade .skeleton-box__trade-types,[dir="rtl"] 
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-types,[dir="rtl"] 
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-types,[dir="rtl"] 
.loading-dtrader-v2__trade .skeleton-box__chart__trade-types {
  right: calc(-1 * var(--semantic-spacing-general-sm));
}

.loading-dtrader-v2__trade .skeleton-box__trade-types,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-types,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-types,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-types {
  position: relative;
  width: 100vw;
  flex-direction: row;
  flex-wrap: nowrap;
  border-radius: 0;
  border-radius: initial;
  padding: var(--semantic-spacing-general-sm) var(--semantic-spacing-general-md);
  gap: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__trade .skeleton-box__trade-types .skeleton,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-types .skeleton,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-types .skeleton,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-types .skeleton {
  flex-shrink: 0;
}

.loading-dtrader-v2__trade .skeleton-box__market,
.loading-dtrader-v2__trade .skeleton-box__trade-types__market,
.loading-dtrader-v2__trade .skeleton-box__trade-params__market,
.loading-dtrader-v2__trade .skeleton-box__chart__market {
  padding: 0 var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__trade .skeleton-box__trade-params,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-params,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-params,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-params {
  padding: var(--semantic-spacing-general-md);
  gap: var(--semantic-spacing-general-md);
}

.loading-dtrader-v2__trade .skeleton-box__trade-params-row,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-params-row,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-params-row,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-params-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.loading-dtrader-v2__trade .skeleton-box__trade-params-column,
.loading-dtrader-v2__trade .skeleton-box__trade-types__trade-params-column,
.loading-dtrader-v2__trade .skeleton-box__trade-params__trade-params-column,
.loading-dtrader-v2__trade .skeleton-box__chart__trade-params-column {
  display: flex;
  flex-direction: column;
  gap: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__trade .skeleton-box__chart,
.loading-dtrader-v2__trade .skeleton-box__trade-types__chart,
.loading-dtrader-v2__trade .skeleton-box__trade-params__chart,
.loading-dtrader-v2__trade .skeleton-box__chart__chart {
  min-height: 400px;
  padding: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__positions {
  width: 100%;
  background-color: var(--semantic-color-slate-solid-surface-frame-mid);
}

.loading-dtrader-v2__positions .skeleton-box__filters, .loading-dtrader-v2__positions .skeleton-box__total-pnl-or-date {
  display: flex;
  gap: var(--semantic-spacing-gap-md);
  margin: var(--semantic-spacing-gap-md) 0;
  padding: 0 var(--semantic-spacing-gap-md);
}

.loading-dtrader-v2__positions .skeleton-box__tabs {
  display: flex;
  background-color: var(--component-modal-bg);
  width: 100%;
  justify-content: space-around;
  padding: 1.3rem 0;
}

.loading-dtrader-v2__positions .skeleton-box__total-pnl-or-date {
  justify-content: space-between;
}

.loading-dtrader-v2__positions .skeleton-box__contract-cards {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: var(--semantic-spacing-gap-md);
  padding: 0 var(--semantic-spacing-gap-md);
}

.loading-dtrader-v2__contract-details {
  background-color: var(--semantic-color-slate-solid-surface-frame-mid);
  padding: var(--core-spacing-400);
  gap: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__contract-details .skeleton-box,
.loading-dtrader-v2__contract-details .skeleton-box__chart,
.loading-dtrader-v2__contract-details .skeleton-box__details {
  display: flex;
  flex-direction: column;
  border-radius: var(--semantic-borderRadius-md);
  background-color: var(--component-modal-bg);
}

.loading-dtrader-v2__contract-details .skeleton-box__chart,
.loading-dtrader-v2__contract-details .skeleton-box__chart__chart,
.loading-dtrader-v2__contract-details .skeleton-box__details__chart {
  min-height: 360px;
  padding: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__contract-details .skeleton-box__details,
.loading-dtrader-v2__contract-details .skeleton-box__chart__details,
.loading-dtrader-v2__contract-details .skeleton-box__details__details {
  padding: var(--semantic-spacing-general-md);
  gap: var(--semantic-spacing-general-md);
}

.loading-dtrader-v2__contract-details .skeleton-box__details-row,
.loading-dtrader-v2__contract-details .skeleton-box__chart__details-row,
.loading-dtrader-v2__contract-details .skeleton-box__details__details-row {
  display: flex;
  justify-content: space-between;
  padding-top: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__contract-details .skeleton-box__details-row:first-child,
.loading-dtrader-v2__contract-details .skeleton-box__chart__details-row:first-child,
.loading-dtrader-v2__contract-details .skeleton-box__details__details-row:first-child {
  padding-top: 0;
  padding-top: initial;
}

.loading-dtrader-v2__contract-details .skeleton-box__details-row:not(:last-child),
.loading-dtrader-v2__contract-details .skeleton-box__chart__details-row:not(:last-child),
.loading-dtrader-v2__contract-details .skeleton-box__details__details-row:not(:last-child) {
  border-bottom: 1px solid var(--semantic-color-monochrome-border-normal-mid);
  padding-bottom: var(--semantic-spacing-general-sm);
}

.loading-dtrader-v2__contract-details .skeleton-box__details-column,
.loading-dtrader-v2__contract-details .skeleton-box__chart__details-column,
.loading-dtrader-v2__contract-details .skeleton-box__details__details-column {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: var(--semantic-spacing-general-2xs);
}

.loading-dtrader-v2__contract-card {
  width: 100%;
  height: 10.4rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  gap: var(--semantic-spacing-gap-md);
  flex-shrink: 0;
  padding: var(--semantic-spacing-general-md);
  border-radius: var(--semantic-borderRadius-md);
  background-color: var(--component-modal-bg);
}

.loading-dtrader-v2__contract-card .details,
.loading-dtrader-v2__contract-card .status-and-profit {
  display: flex;
  gap: var(--core-spacing-400);
  align-items: center;
}

.loading-dtrader-v2__contract-card .status-and-profit {
  justify-content: space-between;
}

.loading-dtrader-v2__contract-card .title {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  gap: var(--semantic-spacing-general-xs);
}

.loading-dtrader-v2__contract-card .stake {
  align-self: flex-end;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-btn {
  text-transform: none !important;
}
.dc-btn {
  vertical-align: middle;
  align-items: center;
  justify-content: center;
  touch-action: manipulation;
  cursor: pointer;
  white-space: nowrap;
  padding: 0 1.6rem;
  display: inline-flex;
  border: 0;
  height: 3.2rem;
  border-radius: 4px;
  transition: all 0.2s cubic-bezier(0.65, 0.05, 0.36, 1);
  outline: 0;
  position: relative;
  text-decoration: none;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
  /*
   * Text will be transformed to sentence case in JS
   * text-transform is declared in .dc-btn instead of .dc-btn__text
   * to ensure consistency (even for children) as per styleguide
   */
  /* TODO: confirm this button with designer are we still using this? */
  /* TODO: confirm this button with designer are we still using this? */
  /* postcss-bem-linter: ignore */
}

.dc-btn__toggle {
  height: auto;
  padding: 0.8rem 2.5rem;
}

.dc-btn__text, .dc-btn__icon {
  display: flex;
  pointer-events: none;
}

.dc-btn__icon {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: inherit;
  text-align: center;
  line-height: 1.5;
  color: var(--text-general);
  pointer-events: none;
}

[dir="ltr"] .dc-btn__icon {
  padding-right: 0.8rem;
}

[dir="rtl"] .dc-btn__icon {
  padding-left: 0.8rem;
}

[dir="ltr"] .dc-btn__icon--circle {
  padding-right: 0;
}

[dir="rtl"] .dc-btn__icon--circle {
  padding-left: 0;
}

.dc-btn:not([disabled]):hover {
  text-decoration: none;
}

.dc-btn__rounded {
  border-radius: 24px;
}

.dc-btn--plus {
  height: 2.4rem !important;
  border: 1px solid var(--border-hover) !important;
  padding: 0 !important;
}

.dc-btn--plus {
  width: 2.4rem;
  background: inherit;
  background-repeat: no-repeat;
  background-position: center;
}

.dc-btn--circle {
  width: 3.2rem !important;
}

.dc-btn--circle {
  height: 3.2rem;
  border-radius: 50%;
}

.dc-btn--circular {
  border-radius: 100px;
}

.dc-btn--transparent {
  background: transparent;
}

.dc-btn--primary {
  background: var(--button-primary-default);
  color: var(--text-colored-background);
}

.dc-btn--primary:hover:not([disabled]) {
  background: var(--button-primary-hover);
}

.dc-btn--primary:active:not([disabled]) {
  background: var(--button-primary-default);
}

.dc-btn--primary:disabled, .dc-btn--primary[disabled] {
  cursor: not-allowed !important;
}

.dc-btn--primary:disabled, .dc-btn--primary[disabled] {
  opacity: 0.32;
}

.dc-btn--primary .dc-btn__text,
.dc-btn--primary .dc-btn__icon {
  color: var(--text-colored-background);
}

.dc-btn--primary__light {
  background: var(--button-primary-light-default);
}

.dc-btn--primary__light:hover:not([disabled]) {
  background: var(--button-primary-light-hover);
}

.dc-btn--primary__light:active:not([disabled]) {
  background: var(--button-primary-light-default);
}

.dc-btn--primary__light:disabled, .dc-btn--primary__light[disabled] {
  cursor: not-allowed !important;
}

.dc-btn--primary__light:disabled, .dc-btn--primary__light[disabled] {
  opacity: 0.32;
}

.dc-btn--primary__light .dc-btn__text,
.dc-btn--primary__light .dc-btn__icon {
  color: var(--brand-red-coral);
}

.dc-btn--secondary {
  background: transparent;
  border: 1px solid var(--button-secondary-default);
}

.dc-btn--secondary:hover:not([disabled]) {
  background: var(--button-secondary-hover);
}

.dc-btn--secondary:active:not([disabled]) {
  border: 1px solid var(--button-secondary-default);
}

.dc-btn--secondary:disabled, .dc-btn--secondary[disabled] {
  cursor: not-allowed !important;
}

.dc-btn--secondary:disabled, .dc-btn--secondary[disabled] {
  opacity: 0.32;
}

.dc-btn--secondary .dc-btn__text,
.dc-btn--secondary .dc-btn__icon {
  color: var(--text-prominent);
}

.dc-btn--tertiary {
  background: var(--button-tertiary-default);
}

.dc-btn--tertiary:hover:not([disabled]) {
  background: var(--button-tertiary-hover);
}

.dc-btn--tertiary:active:not([disabled]) {
  background: var(--button-tertiary-default);
}

.dc-btn--tertiary .dc-btn__text,
.dc-btn--tertiary .dc-btn__icon {
  color: var(--brand-red-coral);
}

.dc-btn--tertiary:disabled, .dc-btn--tertiary[disabled] {
  cursor: not-allowed !important;
}

.dc-btn--tertiary:disabled, .dc-btn--tertiary[disabled] {
  opacity: 0.32;
}

.dc-btn--alternate {
  background: var(--button-tertiary-default);
  border: 2px solid var(--button-primary-default);
}

.dc-btn--alternate:hover:not([disabled]) {
  background: var(--button-primary-default);
}

.dc-btn--alternate:hover:not([disabled]) .dc-btn__text {
  color: var(--text-colored-background);
}

.dc-btn--alternate .dc-btn__text,
.dc-btn--alternate .dc-btn__icon {
  color: var(--brand-red-coral);
}

.dc-btn--green {
  background: var(--status-success);
}

.dc-btn--green:hover:not([disabled]) {
  background: var(--transparent-success);
}

.dc-btn--green:active:not([disabled]) {
  background: var(--status-success);
}

.dc-btn--green .dc-btn__text,
.dc-btn--green .dc-btn__icon {
  color: var(--text-colored-background);
}

.dc-btn--black {
  background: var(--button-get-started-bg);
}

.dc-btn--black:hover:not([disabled]) {
  opacity: 0.7;
}

.dc-btn--black:active:not([disabled]) {
  opacity: 0.7;
}

.dc-btn--black .dc-btn__text,
.dc-btn--black .dc-btn__icon {
  color: var(--general-main-1);
}

.dc-btn__small {
  height: 2.4rem;
  min-width: 4.8rem;
  border-width: 1px;
}

.dc-btn__small .dc-btn__text {
  font-size: 1.2rem;
}

.dc-btn__medium {
  height: 3.2rem;
  min-width: 5.6rem;
  border-width: 1px;
}

.dc-btn__medium .dc-btn__text {
  font-size: 1.4rem;
}

.dc-btn__large {
  height: 4rem;
  min-width: 6.4rem;
  border-width: 2px;
}

.dc-btn__large .dc-btn__text {
  font-size: 1.4rem;
}

.dc-btn__wide {
  width: 100%;
  height: 4rem;
}

.dc-btn__effect:focus:not(:active):after {
  content: "";
  position: absolute;
  top: -0.1em;
  left: -0.1em;
  bottom: -0.1em;
  right: -0.1em;
  border-radius: inherit;
  border: 0 solid var(--brand-secondary);
  opacity: 0.4;
  animation: buttonEffect 0.4s;
  animation-fill-mode: forwards;
  display: block;
}

.dc-btn__group {
  white-space: nowrap;
}

[dir="ltr"] .dc-btn__group .dc-btn + .dc-btn {
  margin-left: 8px;
}

[dir="rtl"] .dc-btn__group .dc-btn + .dc-btn {
  margin-right: 8px;
}

[dir="ltr"] .dc-btn__button-group {
  border-radius: 0 4px 4px 0;
}

[dir="rtl"] .dc-btn__button-group {
  border-radius: 4px 0 0 4px;
}

.dc-btn .initial-loader--btn {
  background-color: transparent;
  background-color: initial;
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.dc-btn .initial-loader--btn .initial-loader__barspinner--rect {
  background-color: var(--text-colored-background);
}

[dir="ltr"] .dc-btn .initial-loader--btn .barspinner {
  margin: 0.6rem 4px 0 -4px;
}

[dir="rtl"] .dc-btn .initial-loader--btn .barspinner {
  margin: 0.6rem -4px 0 4px;
}

.dc-btn .initial-loader--btn .barspinner__rect {
  height: 35%;
}

@keyframes buttonEffect {
  to {
    opacity: 0;
    top: -0.6em;
    left: -0.6em;
    bottom: -0.6em;
    right: -0.6em;
    border-width: 6px;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-badge {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  color: #ffffff;
}

.dc-badge--contained {
  border: none;
}

.dc-badge--bordered {
  border: 1px solid var(--text-prominent);
  color: var(--text-prominent);
}

.dc-badge--blue {
  background-color: #377cfc;
}

.dc-badge--orange {
  background-color: #ff6444;
}

.dc-badge--red {
  background-color: #ff444f;
}

.dc-badge--gray {
  background-color: #d6dadb;
}

.dc-badge--full-rounded {
  border-radius: 2px;
}

[dir="ltr"] .dc-badge--two-rounded {
  border-bottom-left-radius: 8px;
  border-top-right-radius: 8px;
}

[dir="rtl"] .dc-badge--two-rounded {
  border-bottom-right-radius: 8px;
  border-top-left-radius: 8px;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-button-menu */
.dc-button-menu {
  display: flex;
  justify-content: center;
  width: 100%;
  position: relative;
}

.dc-button-menu__button:first-child {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}

[dir="ltr"] .dc-button-menu__button:last-child {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

[dir="rtl"] .dc-button-menu__button:last-child {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}

.dc-button-menu__button {
  margin: 0;
  border: none;
  border-radius: 0px;
  width: 50%;
  background-color: var(--state-normal);
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.dc-button-menu__button .dc-btn__text {
  display: contents;
}

@media (min-width: 1024px) {
  .dc-button-menu__button:hover:not(.dc-button-menu__button--active) {
    background-color: var(--state-hover) !important;
  }
}

[dir="ltr"] .dc-button-menu__button span {
  text-align: left;
}

[dir="rtl"] .dc-button-menu__button span {
  text-align: right;
}

.dc-button-menu__button span {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: inherit;
  line-height: 1.5;
  color: var(--text-general);
}

.dc-button-menu__button--active {
  background-color: var(--state-active) !important;
}

.dc-button-menu__button--active {
  cursor: auto;
  cursor: initial;
}

[dir="ltr"] .dc-button-menu__button--active span {
  text-align: left;
}

[dir="rtl"] .dc-button-menu__button--active span {
  text-align: right;
}

.dc-button-menu__button--active span {
  font-size: 1.4rem;
  color: var(--text-colored-background);
  font-weight: 700;
  text-transform: inherit;
  line-height: 1.5;
  color: var(--text-prominent);
}

.dc-button-menu__toggle {
  margin: 0;
  border: none;
  border-radius: 6px;
  width: 50%;
  background-color: var(--general-section-1);
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */
}

.dc-button-menu__toggle .dc-btn__text {
  display: contents;
}

@media (min-width: 1024px) {
  .dc-button-menu__toggle:hover:not(.dc-button-menu__button--active) {
    background-color: var(--state-hover) !important;
  }
}

[dir="ltr"] .dc-button-menu__toggle span {
  text-align: left;
}

[dir="rtl"] .dc-button-menu__toggle span {
  text-align: right;
}

.dc-button-menu__toggle span {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: inherit;
  line-height: 1.5;
  color: var(--text-less-prominent);
}

.dc-button-menu__toggle--active {
  background-color: var(--state-normal) !important;
}

.dc-button-menu__toggle--active {
  cursor: auto;
  cursor: initial;
}

[dir="ltr"] .dc-button-menu__toggle--active span {
  text-align: left;
}

[dir="rtl"] .dc-button-menu__toggle--active span {
  text-align: right;
}

.dc-button-menu__toggle--active span {
  font-size: 1.4rem;
  color: var(--text-colored-background);
  font-weight: 700;
  text-transform: inherit;
  line-height: 1.5;
  color: var(--text-prominent);
}

[dir="ltr"] .dc-button-menu__counter {
  margin-left: 0.4rem;
}

[dir="rtl"] .dc-button-menu__counter {
  margin-right: 0.4rem;
}

.dc-button-menu__wrapper {
  position: relative;
  border-radius: 4px;
  width: 100%;
  background-color: var(--state-normal);
  display: flex;
}

.dc-button-menu__wrapper .dc-button-menu__button, .dc-button-menu__wrapper .dc-button-menu__button--active {
  background-color: rgba(0, 0, 0, 0) !important;
}

.dc-button-menu__wrapper .dc-button-menu__button, .dc-button-menu__wrapper .dc-button-menu__button--active {
  z-index: 1;
  padding: 0.8rem 0.6rem;
  white-space: normal;
}

.dc-button-menu__wrapper .dc-button-menu__button .dc-btn__text, .dc-button-menu__wrapper .dc-button-menu__button--active .dc-btn__text {
  line-height: normal;
}

.dc-button-menu__wrapper .dc-button-menu__button:nth-last-child(2) {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

.dc-button-menu--highlight {
  display: block;
  position: absolute;
  content: "";
  height: 100%;
  top: 0;
  left: 0;
  z-index: 0;
  transition: transform 0.25s ease;
  pointer-events: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-icon, .dc-popover__target__icon .info:hover {
  --fill-color1: var(--text-general);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: var(--general-section-1);
  --fill-color4: var(--icon-grey-background);
  --fill-color5: var(--text-prominent);
}

.dc-icon--disabled, .dc-popover__target__icon--disabled .info:hover, .dc-popover__target__icon--disabled .info {
  --fill-color1: var(--text-disabled);
  --fill-color2: var(--text-disabled);
}

.dc-icon--active {
  --fill-color1: #ffffff;
  --fill-color2: #ffffff;
}

.dc-icon--green {
  --fill-color1: var(--text-profit-success);
  --fill-color2: var(--text-profit-success);
  --fill-color3: #ffffff;
}

.dc-icon--red {
  --fill-color1: var(--text-loss-danger);
  --fill-color2: var(--text-loss-danger);
  --fill-color3: #ffffff;
}

.dc-icon--secondary, .dc-popover__target__icon .info {
  --fill-color1: var(--text-less-prominent);
  --fill-color2: var(--text-less-prominent);
  --fill-color3: #ffffff;
}

.dc-icon--brand {
  --fill-color1: var(--brand-red-coral);
  --fill-color2: var(--brand-secondary);
  --fill-color3: #ffffff;
}

.dc-icon--black {
  --fill-color1: var(--icon-black-plus);
}

.dc-icon--orange {
  --fill-color1: var(--status-warning);
}

.dc-popover__wrapper {
  position: relative;
}

.dc-popover__container {
  position: absolute;
  left: 0;
  top: 0;
  width: 280px;
}

.dc-popover__container-relative {
  position: relative;
}

.dc-popover__target__icon .counter {
  color: var(--brand-red-coral);
  font-size: 10px;
  font-weight: bold;
  line-height: 1.4em;
  position: absolute;
  top: 50%;
  transform: translateY(-65%);
}

.dc-popover__bubble {
  font-size: 1.2rem;
  color: var(--text-colored-background);
  font-weight: 400;
  text-transform: none;
  text-align: center;
  line-height: 1.25;
  cursor: help;
  position: relative;
  padding: 0.8rem;
  max-width: 31.7rem;
  border-radius: 4px;
  display: flex;
  flex-direction: row;
  background: var(--general-active);
  color: var(--text-prominent);
  z-index: 1;
}

.dc-popover__bubble__icon {
  flex-grow: 1;
  padding-top: 3px;
}

[dir="ltr"] .dc-popover__bubble__icon {
  margin-right: 0.7em;
}

[dir="rtl"] .dc-popover__bubble__icon {
  margin-left: 0.7em;
}

.dc-popover__bubble__text {
  flex-grow: 2;
}

[dir="ltr"] .dc-popover__bubble__text {
  direction: ltr;
}

[dir="rtl"] .dc-popover__bubble__text {
  direction: rtl;
}

.dc-popover__bubble--error {
  background-color: var(--status-danger);
}

[dir="ltr"] .dc-popover__bubble--error {
  direction: ltr;
}

[dir="rtl"] .dc-popover__bubble--error {
  direction: rtl;
}

@media (min-width: 320px) and (max-width: 767px) {
  .dc-popover__trade-params {
    max-width: calc(100vw - 6.7rem);
  }
}

.mobile-widget__item-popover,
.accu-info-display__popover {
  max-width: 28rem;
}

@media (min-width: 320px) and (max-width: 767px) {
  .accu-info-display__popover {
    max-width: 33rem;
  }

  [dir="ltr"] .accu-info-display__popover {
    margin-right: 1rem;
  }

  [dir="rtl"] .accu-info-display__popover {
    margin-left: 1rem;
  }
}

.react-tiny-popover-container--disabled-pointer-event {
  pointer-events: none;
}

.react-tiny-popover-cursor-option {
  cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** @define dc-calendar */
.dc-calendar {
  outline: 0;
  border-radius: 5px;
  z-index: 999;
  box-sizing: border-box;
  font-size: 1rem;
  background: var(--general-main-2);
  box-shadow: 0 2px 8px 0 var(--shadow-menu);
}

.dc-calendar__header, .dc-calendar__footer {
  position: relative;
  display: flex;
  align-items: center;
  height: 5rem;
  border-radius: 5px;
  padding: 1.6rem;
  box-sizing: border-box;
}

.dc-calendar__header {
  justify-content: center;
}

[dir="ltr"] .dc-calendar__footer :last-child:not(:only-child),
[dir="ltr"] .dc-calendar__footer .dc-calendar__btn--today {
  margin-left: auto;
}

[dir="rtl"] .dc-calendar__footer :last-child:not(:only-child),
[dir="rtl"] .dc-calendar__footer .dc-calendar__btn--today {
  margin-right: auto;
}

.dc-calendar__body {
  border-top: 0.1rem solid var(--general-section-2);
  border-bottom: 0.1rem solid var(--general-section-2);
}

.dc-calendar__body--date, .dc-calendar__body--month, .dc-calendar__body--year, .dc-calendar__body--decade {
  display: grid;
  grid-gap: 1.2rem;
  padding: 0.8rem 2rem;
}

.dc-calendar__body--date .dc-calendar__cell, .dc-calendar__body--month .dc-calendar__cell, .dc-calendar__body--year .dc-calendar__cell, .dc-calendar__body--decade .dc-calendar__cell {
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 5px;
}

.dc-calendar__body--date {
  grid-template-columns: repeat(7, 2.4rem);
  grid-auto-rows: 2.4rem;
}

.dc-calendar__body--date .dc-calendar__cell {
  width: 100%;
  height: 100%;
}

.dc-calendar__body--month, .dc-calendar__body--year, .dc-calendar__body--decade {
  grid-template-columns: repeat(3, minmax(7.2rem, 1fr));
  grid-auto-rows: minmax(4.2rem, auto);
}

.dc-calendar__body--month .dc-calendar__cell, .dc-calendar__body--year .dc-calendar__cell, .dc-calendar__body--decade .dc-calendar__cell {
  width: 5.6rem;
  height: 3.2rem;
}

.dc-calendar__body--month .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled), .dc-calendar__body--year .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled), .dc-calendar__body--decade .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled) {
  color: var(--text-general);
}

.dc-calendar__body--decade .dc-calendar__cell {
  width: 100%;
}

.dc-calendar__icon {
  cursor: pointer;
}

[dir="ltr"] .dc-calendar__icon {
  right: 5%;
}

[dir="rtl"] .dc-calendar__icon {
  left: 5%;
}

.dc-calendar__icon--today:hover {
  cursor: pointer;
}

.dc-calendar__btn {
  text-align: center;
  padding: 0 0.2rem;
  font-weight: bold;
  cursor: pointer;
  border: none;
  outline: none;
  background: none;
}

.dc-calendar__btn--disabled {
  cursor: default;
  transition: none;
}

.dc-calendar__btn--disabled .dc-calendar__icon {
  cursor: default;
}

.dc-calendar__btn--is-hidden {
  display: none;
}

[dir="ltr"] .dc-calendar__btn--select {
  text-align: left;
}

[dir="rtl"] .dc-calendar__btn--select {
  text-align: right;
}

.dc-calendar__btn--select {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  line-height: 1.5;
  color: var(--text-prominent);
}

.dc-calendar__btn--prev-year, .dc-calendar__btn--next-year, .dc-calendar__btn--prev-month, .dc-calendar__btn--next-month {
  position: absolute;
  padding: 0 0.5em;
  height: 1.4em;
}

[dir="ltr"] .dc-calendar__btn--prev-year {
  left: 7%;
}

[dir="rtl"] .dc-calendar__btn--prev-year {
  right: 7%;
}

[dir="ltr"] .dc-calendar__btn--next-year {
  right: 7%;
}

[dir="rtl"] .dc-calendar__btn--next-year {
  left: 7%;
}

[dir="ltr"] .dc-calendar__btn--prev-month {
  left: 14%;
}

[dir="rtl"] .dc-calendar__btn--prev-month {
  right: 14%;
}

[dir="ltr"] .dc-calendar__btn--next-month {
  right: 14%;
}

[dir="rtl"] .dc-calendar__btn--next-month {
  left: 14%;
}

[dir="ltr"] .dc-calendar__cell {
  text-align: left;
}

[dir="rtl"] .dc-calendar__cell {
  text-align: right;
}

.dc-calendar__cell {
  font-size: 1.2rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.25;
  align-self: center;
  justify-self: center;
  position: relative;
  cursor: pointer;
  color: var(--text-general);
  box-sizing: border-box;
}

.dc-calendar__cell--hover {
  color: var(--text-general);
  background: var(--state-hover);
}

.dc-calendar__cell:nth-child(7n):before {
  padding: 0;
  border-radius: 4px;
}

.dc-calendar__cell:nth-child(7n+1):before {
  border-radius: 4px;
}

[dir="ltr"] .dc-calendar__cell:nth-child(7n+1):before {
  left: 0;
}

[dir="rtl"] .dc-calendar__cell:nth-child(7n+1):before {
  right: 0;
}

.dc-calendar__cell:nth-child(7n+1):after {
  content: none;
}

[dir="ltr"] .dc-calendar__cell--bold {
  text-align: left;
}

[dir="rtl"] .dc-calendar__cell--bold {
  text-align: right;
}

.dc-calendar__cell--bold {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  line-height: 1.5;
  color: var(--text-prominent);
}

.dc-calendar__cell--disabled:not(.dc-calendar__cell--today):not(.dc-calendar__cell--between), .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--between) {
  color: var(--text-disabled);
  transition: none;
  cursor: default;
}

.dc-calendar__cell--is-hidden {
  display: none;
}

.dc-calendar__cell--today {
  font-weight: bold;
  color: var(--text-prominent);
  border: 1px solid var(--state-active);
}

.dc-calendar__cell--today-duration {
  background: var(--state-active);
}

.dc-calendar__cell--active {
  font-weight: bold;
  color: var(--text-prominent);
  background: var(--state-active);
}

.dc-calendar__cell--active:hover {
  background: var(--state-active);
}

.dc-calendar__cell--active-duration {
  background: var(--state-active);
}

.dc-calendar__cell--active-duration:after {
  position: absolute;
  content: "";
  width: 100%;
  top: 0;
  z-index: -1;
  height: 100%;
  background: var(--state-active);
}

[dir="ltr"] .dc-calendar__cell--active-duration:after {
  right: 50%;
  padding-left: 1rem;
}

[dir="rtl"] .dc-calendar__cell--active-duration:after {
  left: 50%;
  padding-right: 1rem;
}

.dc-calendar__cell--between {
  font-weight: bold;
  color: var(--text-prominent);
  background: var(--state-active);
}

.dc-calendar__cell--between-hover:before {
  position: absolute;
  content: "";
  width: 100%;
  z-index: -2;
  height: 100%;
  background: var(--state-hover);
}

[dir="ltr"] .dc-calendar__cell--between-hover:before {
  padding-left: 3.2rem;
}

[dir="rtl"] .dc-calendar__cell--between-hover:before {
  padding-right: 3.2rem;
}

.dc-calendar__cell--between:hover {
  background: var(--state-active);
}

.dc-calendar__cell--between:before {
  position: absolute;
  content: "";
  width: 100%;
  z-index: -1;
  height: 100%;
  background: var(--state-active);
}

[dir="ltr"] .dc-calendar__cell--between:before {
  padding-left: 3.2rem;
}

[dir="rtl"] .dc-calendar__cell--between:before {
  padding-right: 3.2rem;
}

.dc-calendar__cell-tooltip {
  position: absolute;
  display: inline-grid;
  cursor: pointer;
  height: 0;
  top: 0;
  justify-content: center;
  width: 100%;
}

[dir="ltr"] .dc-calendar__cell-tooltip {
  left: 0;
}

[dir="rtl"] .dc-calendar__cell-tooltip {
  right: 0;
}

.dc-calendar__cell-tooltip-icon {
  margin-top: 0.1rem;
  display: inherit;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
[dir="ltr"] .dc-card {
  text-align: left;
}
[dir="rtl"] .dc-card {
  text-align: right;
}
.dc-card {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.5;
  border: 1px solid var(--border-normal);
  padding: 1.6rem;
  border-radius: 4px;
}

.dc-card__wrapper {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: auto;
  margin: 1.6rem;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-carousel {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.dc-carousel--mt5 {
  justify-content: initial;
}

.dc-carousel__container {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
}

.dc-carousel__box {
  overflow: hidden;
}

.dc-carousel__box--mt5 {
  margin: 0 -1.4rem;
}

.dc-carousel__wrapper {
  display: flex;
  flex-direction: row;
  transition: transform 0.3s linear;
  width: -moz-fit-content;
  width: fit-content;
  padding: 0.5rem 0;
  height: 100%;
}

.dc-carousel__wrapper--mt5 {
  padding-top: 0;
  padding-top: initial;
}

.dc-carousel__card {
  display: flex;
  flex-direction: column;
  padding-bottom: 0.8rem;
}

.dc-carousel__nav {
  align-items: center;
  box-sizing: border-box;
  display: flex;
  width: 100%;
  padding: 0 2.4rem;
  overflow: hidden;
  margin-bottom: 2.4rem;
  justify-content: space-between;
}

.dc-carousel__nav--upper {
  margin-bottom: 0;
}

.dc-carousel__nav-list {
  display: inline-block;
  text-align: center;
  margin: 0 auto;
  position: relative;
}

.dc-carousel__nav--lower {
  margin-bottom: 0;
}

.dc-carousel__nav-item {
  width: 0.8rem;
  height: 0.8rem;
  border-radius: 50%;
  display: inline-block;
  margin: 0 0.8rem;
  cursor: pointer;
}

.dc-carousel__nav-item--active {
  position: absolute;
  top: 0;
  cursor: auto;
  cursor: initial;
  transition: transform 0.3s linear;
}

[dir="ltr"] .dc-carousel__nav-item--active {
  left: 0;
}

[dir="rtl"] .dc-carousel__nav-item--active {
  right: 0;
}

.dc-carousel__icon {
  cursor: pointer;
}

.dc-carousel__icon--left {
  position: relative;
}

[dir="ltr"] .dc-carousel__icon--left {
  right: 5.2rem;
}

[dir="rtl"] .dc-carousel__icon--left {
  left: 5.2rem;
}

.dc-carousel__icon--mt5 {
  background: var(--icon-grey-background);
  width: 6rem;
  height: 6rem;
  border-radius: 50%;
  transform: scale(0.5);
  line-height: 6rem;
  text-align: center;
  justify-content: space-between;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.cfd-compare-accounts-carousel {
  position: relative;
  --slide-spacing: 1rem;
  --slide-size: 50%;
  --slide-height: 19rem;
  overflow: hidden;
}

.cfd-compare-accounts-carousel__viewport {
  width: 100%;
  height: 100%;
}

@media (max-width: 1279px) {
  .cfd-compare-accounts-carousel__viewport {
    padding-bottom: 6rem;
  }
}

.cfd-compare-accounts-carousel__container {
  backface-visibility: hidden;
  display: flex;
  touch-action: pan-y;
  flex-direction: row;
  max-height: auto;
  margin: 1.6rem;
  transition: transform 0s ease-in-out;
}

@media (max-width: 1279px) {
  .cfd-compare-accounts-carousel__container {
    justify-content: safe center;
  }
}

.cfd-compare-accounts-carousel__slide {
  flex: 0 0 var(--slide-size);
  min-width: 0;
  position: relative;
}

[dir="ltr"] .cfd-compare-accounts-carousel__slide {
  padding-left: var(--slide-spacing);
}

[dir="rtl"] .cfd-compare-accounts-carousel__slide {
  padding-right: var(--slide-spacing);
}

.cfd-compare-accounts-carousel__slide__img {
  display: block;
  height: var(--slide-height);
  width: 100%;
  -o-object-fit: cover;
     object-fit: cover;
}

.cfd-compare-accounts-carousel__button {
  background-color: var(--general-main-1);
  z-index: 1;
  color: var(--background-site);
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  top: 50%;
  cursor: pointer;
  width: 4rem;
  height: 4rem;
  border: 1px solid var(--general-background-main);
  border-radius: 50%;
  box-shadow: 0px 0px 24px rgba(0, 0, 0, 0.08), 0px 24px 24px rgba(0, 0, 0, 0.08);
}

[dir="ltr"] .cfd-compare-accounts-carousel__button--prev {
  left: 1.6rem;
}

[dir="rtl"] .cfd-compare-accounts-carousel__button--prev {
  right: 1.6rem;
}

[dir="ltr"] .cfd-compare-accounts-carousel__button--next {
  right: 1.6rem;
}

[dir="rtl"] .cfd-compare-accounts-carousel__button--next {
  left: 1.6rem;
}

.cfd-compare-accounts-carousel__button:disabled {
  opacity: 0.3;
  display: none;
}

.cfd-compare-accounts-carousel__button__svg {
  width: 50%;
  height: 35%;
}

@media (min-width: 320px) and (max-width: 767px) {
  .cfd-compare-accounts-carousel__button {
    display: none;
  }
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-clipboard {
  cursor: pointer;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-checkbox {
  display: flex;
  justify-content: flex-start;
  cursor: pointer;
  align-items: center;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
}

.dc-checkbox__input {
  display: none;
}

.dc-checkbox__box {
  outline: none !important;
}

.dc-checkbox__box {
  display: flex;
  width: 16px;
  height: 16px;
  transition: 0.3s ease-in-out;
  flex-shrink: 0;
  margin: 0 8px;
  border-radius: 2px;
  align-self: center;
  box-sizing: border-box;
  border: 2px solid var(--text-less-prominent);
}

.dc-checkbox__box--active {
  border: none;
  background-color: var(--brand-red-coral);
}

.dc-checkbox--active {
  border: none;
  background-color: var(--brand-red-coral);
}

.dc-checkbox--disabled {
  cursor: not-allowed !important;
}

.dc-checkbox--disabled {
  opacity: 0.5;
}

.dc-checkbox--grey-disabled {
  background-color: var(--checkbox-disabled-grey);
}

.dc-checkbox__label--error {
  color: var(--text-loss-danger) !important;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-checklist {
  max-width: 400px;
}

.dc-checklist__item {
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: solid 1px var(--border-normal);
  padding: 12px;
}

[dir="ltr"] .dc-checklist__item-text {
  text-align: left;
}

[dir="rtl"] .dc-checklist__item-text {
  text-align: right;
}

.dc-checklist__item-text {
  max-width: 80%;
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  line-height: 1.5;
}

.dc-checklist__item-status {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 32px;
  height: 32px;
}

.dc-checklist__item-status--action {
  cursor: pointer;
  background-color: var(--brand-red-coral);
  border-radius: 4px;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
}

.dc-checklist__item-status--disabled {
  pointer-events: none;
}

.dc-checklist__item-status--button {
  width: auto;
}

.dc-checklist__item--disabled {
  opacity: 0.5;
  pointer-events: none;
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
.dc-circular-progress {
  position: relative;
  line-height: 0;
  width: -moz-fit-content;
  width: fit-content;
}

.dc-circular-progress__bar {
  transform-origin: 50% 50%;
  transition: stroke-dashoffset 1s;
  stroke: var(--brand-secondary);
}

[dir="ltr"] .dc-circular-progress__bar {
  transform: scaleX(-1) rotate(-90deg);
}

[dir="rtl"] .dc-circular-progress__bar {
  transform: scaleX(-1) rotate(90deg);
}

.dc-circular-progress__bar--warning {
  stroke: var(--status-warning);
}

.dc-circular-progress__bar--danger {
  stroke: var(--status-danger);
}

[dir="ltr"] .dc-circular-progress--clockwise {
  transform: rotate(-90deg);
}

[dir="rtl"] .dc-circular-progress--clockwise {
  transform: rotate(90deg);
}

.dc-circular-progress__icon {
  position: absolute;
  width: 1.6rem;
  height: 100%;
  top: 50%;
}

[dir="ltr"] .dc-circular-progress__icon {
  left: 50%;
  transform: translate(-50%, -50%);
}

[dir="rtl"] .dc-circular-progress__icon {
  right: 50%;
  transform: translate(50%, -50%);
}
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/*RTL Language Mixin*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* status colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/* Wallets */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon-active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** Need to add new breakpoints for mixins */
/** Slideout Animation */
@keyframes SlideIn {
  from {
    opacity: 0;
    max-height: 0;
  }

  to {
    opacity: 1;
    height: auto;
    max-height: 100vh;
  }
}

@keyframes SlideOut {
  from {
    opacity: 1;
    max-height: 100vh;
  }

  to {
    opacity: 0;
    max-height: 0;
  }
}

.dc-collapsible {
  padding: 0.8rem;
  border-radius: 0.4rem;
  background-color: var(--general-section-1);
}

.dc-collapsible--has-collapsible-btn {
  padding-top: 0;
}

.dc-collapsible--has-title {
  padding-bottom: 0;
}

.dc-collapsible__button {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 32px;
}

.dc-collapsible__button--handle {
  align-items: baseline;
  height: 3.8rem;
}

.dc-collapsible__icon {
  transition: transform 0.3s ease-in-out;
}

.dc-collapsible__icon--handle {
  width: 4rem;
  height: 0.4rem;
  margin-top: 0.8rem;
  border-radius: 0.2rem;
  backgrou